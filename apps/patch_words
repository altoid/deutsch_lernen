#!/usr/bin/env python

import argparse
import sys
import requests

from dlernen import config

from pprint import pprint


if __name__ == '__main__':
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument('-l', '--listids',
                        nargs='+',
                        type=int,
                        help='id of word list to use')

    cl_args = parser.parse_args()

    wordlist_ids = cl_args.listids if cl_args.listids else None

    url = "%s/api/words" % config.Config.DB_URL
    if wordlist_ids:
        wordlist_ids = map(str, wordlist_ids)
        args = ','.join(wordlist_ids)
        url = "%s?wordlist_id=%s" % (url, args)

    r = requests.get(url)
    if not r:
        print('oh shit')
        sys.exit()

    result = r.json()

    words_to_patch = []

    # get all the verbs
    attrkey = 'third_person_past'
    result = list(filter(lambda x: x['pos_name'] == 'Verb', result))
    for w in result:
        tpp = list(filter(lambda x: x['attrkey'] == attrkey, w['attributes']))
        if not tpp[0]['attrvalue']:
            words_to_patch.append(w)

#    pprint(words_to_patch)
    print("found %s verbs where %s is unset" % (len(words_to_patch), attrkey))

    if not words_to_patch:
        print("nothing to do")
        sys.exit()

    for p in words_to_patch:
        answer = input("%s [%s] ---> " % (p['word'], attrkey))
        answer = answer.strip()

        while not answer:
            answer = input("%s [%s] ---> " % (p['word'], attrkey))
            answer = answer.strip()

        if answer == 'q':
            sys.exit()

        payload = {
            "attributes_adding": [
                {
                    "attrvalue": answer,
                    "attrkey": attrkey
                }
            ]
        }

        url = "%s/api/word/%s" % (config.Config.DB_URL, p['word_id'])
        r = requests.put(url, json=payload)
        if r.status_code != 200:
            pprint(p)
            pprint(answer)
            sys.exit()
