#!/usr/bin/python
# -*- python -*-

import MySQLdb
# docs at http://mysql-python.sourceforge.net/MySQLdb.html

import string
import common
import noun
import sys
import codecs
import dsn
import argparse
import operator

def lookup(word):
    word = word.lower()
    word = db.escape_string(word)
    word = unicode(word, 'utf8')

    q = """
select
    pos_name,
    word,
    word_id,
	concat(attrkey, ':') attrkey,
    attrvalue,
    pf.sort_order
from
    mashup
inner join pos_form pf on pf.attribute_id = mashup.attribute_id and pf.pos_id = mashup.pos_id
where word_id in
    (
    select
        word_id
    from
        mashup
    where
    	word like '%%%(word)s%%' or attrvalue like '%%%(word)s%%'
    )
""" % {
        'word' : word
        }

    c.execute(q)

    result = []
    for row in c.fetchall():
        d = dict(zip(['pos_name', 'word', 'word_id', 'attrkey', 'value', 'sort_order'],
                 row))
        result.append(d)

    if len(result) == 0:
        print "%s NOT FOUND:  %s" % ('#' * 33, word)
        return

    result = sorted(result, key=operator.itemgetter('word', 'sort_order'))

    # get the max width of all attr keys
    max_attr_width = 0
    max_tag_length = 0
    for r in result:
        if len(r['attrkey']) > max_attr_width:
            max_attr_width = len(r['attrkey'])
        tag_length = len("%s (%s)" % (r['word'], r['pos_name']))
        if tag_length > max_tag_length:
            max_tag_length = tag_length

    current_word_id = -1
    for r in result:
        if r['word_id'] != current_word_id:
            print "%s" % ('=' * 66)
            current_word_id = r['word_id']
            tag = "%s (%s)" % (r['word'], r['pos_name'])
        else:
            tag = ''

        print "%s %s %s" % (string.ljust(tag, max_tag_length + 10),
                            string.ljust(r['attrkey'], max_attr_width),
                            r['value'])

    # record this lookup
    q = """
insert into lookup (word_id) values (%s)
on duplicate key update count = count + 1
""" % (result[0]['word_id'])
    c.execute(q)
    db.commit()

parser = argparse.ArgumentParser()
parser.add_argument("word",
                    nargs='+',
                    help="word to look up")
args = parser.parse_args()

# https://pythonhosted.org/kitchen/unicode-frustrations.html
utf8writer = codecs.getwriter('utf8')
sys.stdout = utf8writer(sys.stdout)

db = dsn.getConnection()
c = db.cursor()

for word in args.word:
    lookup(word)

