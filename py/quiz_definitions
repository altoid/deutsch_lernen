#!/usr/bin/python

import sys
import quiz_sql
import dsn
import argparse
from pprint import pprint


def get_article(db):
    article_cursor = db.cursor(dictionary=True)
    article_query = """
 select wa.value 
 from word w, word_attribute wa, attribute a 
 where w.id = wa.word_id 
 and wa.attribute_id = a.id 
 and attrkey = 'article' 
 and word_id = %s
""" % row['word_id']

    article_cursor.execute(article_query)
    article = None
    for r1 in article_cursor.fetchall():
        article = r1['value']
        break

    article_cursor.close()
    return article


def word_ids_from_wordlist(c, list_id):
    """
    return a list of the word ids in the given word list.
    """
    sql = """
    select ifnull(code, '') code
    from wordlist
    where id = %s
    """
    c.execute(sql, (list_id,))
    row = c.fetchone()
    code = row['code']
    if code:
        c.execute(code)
    else:
        sql2 = """
        select word_id
        from wordlist_known_word
        where wordlist_id = %s
        """
        c.execute(sql2, (list_id,))
    rows = c.fetchall()
    return map(lambda x: x['word_id'], rows)


if __name__ == '__main__':
    db = dsn.getConnection()
    c = db.cursor(dictionary=True)

    parser = argparse.ArgumentParser()
    parser.add_argument('-l', '--listid',
                        nargs='+',
                        type=int,
                        help='id of word list to use')
    parser.add_argument('-r', '--random',
                        action='store_true',
                        help='pick 10 words at random and quiz them')
    cl_args = parser.parse_args()

    q = None
    args = None
    if cl_args.listid:
        mega = map(lambda x: word_ids_from_wordlist(c, x), cl_args.listid)
        flattened = reduce(lambda x, y: x + y, mega, [])
        word_ids = list(set(flattened))
        word_id_list = ','.join(map(lambda x: str(x), word_ids))
        subquery = """
        select w.id word_id 
        from word w
        where id in (%s)""" % word_id_list
        filter_clause = ["    inner join (%s) t on w.id = t.word_id" % subquery]
    elif cl_args.random:
        subquery = """
        select w.id word_id
        from word w
        order by rand()
        limit 10
"""
        c.execute(subquery)
        rows = c.fetchall()
        word_ids = [x['word_id'] for x in rows]
        word_id_list = ','.join(map(lambda x: str(x), word_ids))
        subquery = """
        select w.id word_id 
        from word w
        where id in (%s)""" % word_id_list
        filter_clause = ["    inner join (%s) t on w.id = t.word_id" % subquery]
    else:
        filter_clause = []
    q = quiz_sql.build_quiz_query('definitions', join_clauses=filter_clause)
    
    done = False
    counter = 0
    while not done:
        c.execute(q)
        rows = c.fetchall()
        if not rows:
            print "es gibt kein Welten mehr zu erobern"
            break
        
        for row in rows:
            # if the word is a noun, get its article.  if it's not a noun, this query retrieves nothing.
            article = get_article(db)

            counter += 1
            print "[%s]" % counter,

            if article:
                print article,

            print unicode(row['word'])
            prompt = "hit return for answer, q to quit:  --> "
            answer = raw_input(prompt).strip().lower()

            if answer.startswith('q'):
                done = True
                continue

            print row['value']

            prompt = "correct? --> "
            answer = raw_input(prompt).strip().lower()

            while len(answer) == 0:
                answer = raw_input(prompt).strip().lower()

            if answer.startswith('y'):
                row['correct_count'] += 1

            row['presentation_count'] += 1

            u = """
        insert into quiz_score
        (quiz_id,word_id,attribute_id,presentation_count,correct_count)
        VALUES
        (%s, %s, %s, %s, %s)
        on duplicate key update
        presentation_count = values(presentation_count),
        correct_count = values(correct_count)
        """ % (row['quiz_id'],
               row['word_id'],
               row['attribute_id'],
               row['presentation_count'],
               row['correct_count'])

            c.execute(u)
            db.commit()

    c.close()
    db.close()

    print 'bis bald'
