#!/usr/bin/python

import quiz_sql
import sys
import dsn
import pprint
import argparse

filters = {
    'irregular verbs' : {
        'join_clauses': ['inner join wordlist_known_word ww on ww.word_id =  w.id',
                         'inner join wordlist wl on wl.id = ww.wordlist_id'],
        'where_clauses': ["""wl.name = 'irregular verbs'"""]
    },
    'no filter': {}
}

def choose_filter():
    # prepare menu based on the filter keys, with no filter as default
    menu = ['irregular verbs', 'no filter']

    filter = {}

    # present menu until we get a useful answer
    while True:
        cnt = 0
        default = len(menu) - 1
        for m in menu:
            print "%s - %s" % (cnt, m)
            cnt += 1

        prompt = '--> [%s - %s] ' % (default,
                                     menu[default])
        try:
            answer = raw_input(prompt).strip()
            if len(answer) == 0:
                break

            answer = int(answer)
            if answer == default:
                break

            filter = filters[menu[int(answer)]]
            break
        except:
            continue

    return filter

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    cl_args = parser.parse_args()

    db = dsn.getConnection()
    c = db.cursor(dictionary=True)
    
    q = """
    select id, name, quizkey
    from quiz
    where quizkey not in ('genders', 'definitions')
    order by id
    """
    
    choices = {}
    c.execute(q)
    for row in c.fetchall():
        choices[row['id']] = row
    
    for k in choices:
        print k, choices[k]['name']
    
    # pick attributes
    qkey = None
    while True:
        choice = raw_input('pick attribute, q to quit ---> ').strip()
    
        if choice == '':
            continue
    
        if choice == 'q':
            break
    
        try:
            choice = int(choice)
    
            if choice in choices.keys():
                qkey = choices[choice]['quizkey']
                break
    
        except ValueError:
            continue
    
    if not qkey:
        print "no quiz chosen"
        sys.exit()

    filter = choose_filter()
    
    q = quiz_sql.build_quiz_query(qkey,
                                  join_clauses=filter.get('join_clauses', []),
                                  where_clauses=filter.get('where_clauses', []))
    
    wordcount = 1
    done = False
    while not done:
        c.execute(q)
        for row in c.fetchall():
            prompt = "[%s] answer, q to quit --[%s] <%s>" % (
                wordcount, row['word'], row['method'])

            # apparently raw_input can't handle unicode chars in the prompt
            print prompt,
            answer = raw_input(" --> ")
            answer = unicode(answer, 'utf8').strip().lower()
            while len(answer) == 0:
                print prompt,
                answer = raw_input(" --> ")
                answer = unicode(answer, 'utf8').strip().lower()
        
            if answer == row['value']:
                print 'ja'
                row['correct_count'] += 1
            elif answer == 'q':
                done = True
                continue
            else:
                print 'nein:  %s' % (row['value'])
        
            row['presentation_count'] += 1
        
            u = """
        insert into quiz_score
        (quiz_id,word_id,attribute_id,presentation_count,correct_count)
        VALUES
        (%s, %s, %s, %s, %s)
        on duplicate key update
        presentation_count = values(presentation_count),
        correct_count = values(correct_count)
        """ % (row['quiz_id'],
               row['word_id'],
               row['attribute_id'],
               row['presentation_count'],
               row['correct_count'])
        
            c.execute(u)
            db.commit()
    
            wordcount += 1
    
    c.close()
    db.close()
    
    print 'auf wiedersehen'
