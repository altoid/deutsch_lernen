#!/usr/bin/env python

from dlernen import config
import argparse
import requests
from pprint import pprint
import sys
import random


def get_next_word_to_test(wordlist_ids):
    url = "%s/api/quiz/%s" % (config.Config.DB_URL, quiz_key)
    r = requests.get(url)
    result = r.json()
    # pprint(result)
    attribute = random.choice(result['attributes'])
    url = "%s/api/words/%s?limit=%s" % (config.Config.DB_URL, attribute, 1)
    if wordlist_ids:
        url = "%s&wordlist_id=%s" % (url, ','.join([str(x) for x in wordlist_ids]))
    r = requests.get(url)
    chosen_words = r.json()
    # pprint(chosen_words)
    url = "%s/api/quiz_data" % config.Config.DB_URL
    payload = {
        "quiz_key": quiz_key,
        "word_ids": chosen_words['word_ids']
    }
    r = requests.put(url, json=payload)
    quiz_data = r.json()

    if not quiz_data:
        return attribute, None

    return attribute, quiz_data[0]


# usage
#
# quiz <quiz_key>
# show available quizzes
# filter by list

if __name__ == '__main__':
    url = "%s/api/quiz" % config.Config.DB_URL
    r = requests.get(url)
    result = r.json()
    available_quizzes = {x['quiz_key'] for x in result}
    l = '\n'.join(sorted(list(available_quizzes)))
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter,
                                     description="""
available quizzes:

%(available_quizzes)s
""" % {
    'available_quizzes': l
    })

    parser.add_argument("quiz")
    parser.add_argument('-l', '--listids',
                        nargs='+',
                        type=int,
                        help='id of word list to use')

    cl_args = parser.parse_args()

    if cl_args.quiz not in available_quizzes:
        print("no such quiz:  %s" % cl_args.quiz)

    quiz_key = cl_args.quiz
    if quiz_key in {'genders', 'definitions', 'plurals'}:
        print("there is a separate quiz app for %s" % quiz_key)
        sys.exit()

    while True:
        attribute, quiz_me = get_next_word_to_test(cl_args.listids)
        if not quiz_me:
            print("es gibt keine Welten mehr zu erobern")
            break

        answer = input("%s [%s], q to quit ---> " % (quiz_me['word'], attribute))

        # answer = str(answer, 'utf8').strip().lower()
        answer = answer.strip()

        if not answer:
            continue

        if answer == 'q':
            break

        payload = {
            "quiz_id": quiz_me['quiz_id'],
            "word_id": quiz_me['word_id'],
            "attribute_id": quiz_me[attribute]['attribute_id'],
            "presentation_count": quiz_me[attribute]['presentation_count'],
            "correct_count": quiz_me[attribute]['correct_count']
        }

        if answer == quiz_me[attribute]['attrvalue']:
            print("richtig")
            payload['correct_count'] += 1
        else:
            print("falsch:  %s" % quiz_me[attribute]['attrvalue'])

        payload['presentation_count'] += 1

        url = "%s/api/quiz_data" % config.Config.DB_URL
        r = requests.post(url, data=payload)

    print('bis bald')