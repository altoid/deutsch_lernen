#!/usr/bin/env python

from dlernen import config
import argparse
import json
import requests
from pprint import pprint


def get_next_word_to_test():
    url = "%s/api/quiz_data" % config.Config.DB_URL
    payload = {
        "quizkey": "definitions",
        "word_ids": chosen_words['word_ids']
    }
    r = requests.put(url, json=payload)
    quiz_data = json.loads(r.text)

    # dig the word_ids out of the result and then find the articles for each word that is a noun.
    word_ids = [x['word_id'] for x in quiz_data]
    url = "%s/api/words" % config.Config.DB_URL
    payload = {
        "word_ids": word_ids
    }
    r = requests.put(url, json=payload)
    word_attributes = json.loads(r.text)

    # enrich the quiz_data by adding the articles
    word_id_to_article = {}
    for wa in word_attributes:
        if 'article' not in wa:
            continue

        word_id_to_article[wa['word_id']] = wa['article']

    for qd in quiz_data:
        if qd['word_id'] in word_id_to_article:
            qd['article'] = word_id_to_article[qd['word_id']]

    return quiz_data


if __name__ == '__main__':
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter,
                                     description="""
quiz_definitions (no args)
all words

quiz_definitions -l <list_id> <list_id> ...
all from a list

quiz_definitions -n <x> -r
n randomly chosen

quiz_definitions -n <x> -l <list_id> <list_id> ...
n randomly chosen from lists

quiz_definitions -n <x>
n most recent
""")

    parser.add_argument('-l', '--listids',
                        nargs='+',
                        type=int,
                        help='id of word list to use')
    parser.add_argument('-n', '--nwords',
                        type=int,
                        default=10,
                        help='quiz the n most recently added words.  defaults to 10.')
    parser.add_argument('-r', '--recent',
                        action='store_true',
                        help='pick most recently added words and quiz them.')
    cl_args = parser.parse_args()

    url = "%s/api/choose_words" % config.Config.DB_URL
    url = "%s?limit=%s&recent=%s" % (url, cl_args.nwords, cl_args.recent)
    if cl_args.listids:
        url = "%s&list_id=%s" % (url, ','.join([str(x) for x in cl_args.listids]))

    pprint(url)

    r = requests.get(url)
    chosen_words = json.loads(r.text)

    done = False
    counter = 0
    while not done:
        # returns at most one result - query has LIMIT 1
        rows = get_next_word_to_test()

        if not rows:
            print("es gibt keine Welten mehr zu erobern")
            break

        row = rows[0]
        counter += 1
        print("[%s]" % counter, end=' ')

        if 'article' in row:
            print(row['article'], end=' ')

        print(str(row['word']))
        prompt = "hit return for answer, q to quit:  --> "
        answer = input(prompt).strip().lower()

        if answer.startswith('q'):
            done = True
            break

        print(row['attrvalue'])

        prompt = "correct? --> "
        answer = input(prompt).strip().lower()

        while len(answer) == 0:
            answer = input(prompt).strip().lower()

        if answer.startswith('y'):
            row['correct_count'] += 1

        row['presentation_count'] += 1

        url = "%s/api/quiz_data" % config.Config.DB_URL
        r = requests.post(url, data=row)

    print('bis bald')
