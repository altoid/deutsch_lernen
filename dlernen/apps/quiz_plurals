#!/usr/bin/env python

import argparse
from app_common import *

if __name__ == '__main__':
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter,
                                     description="""
quiz_plurals (no args)
all words

quiz_plurals -l <wordlist_id> <wordlist_id> ...
all from a list

quiz_plurals -n <x> -r
n randomly chosen

quiz_plurals -n <x> -l <wordlist_id> <wordlist_id> ...
n randomly chosen from lists

quiz_plurals -n <x>
n most recent

THE -n AND -r OPTIONS NO LONGER WORK
""")

    # TODO - restore word recency feature.

    parser.add_argument('-l', '--listids',
                        nargs='+',
                        type=int,
                        help='id of word list to use')
    parser.add_argument('-n', '--nwords',
                        type=int,
                        default=10,
                        help='quiz up to n words.  defaults to 10.')
    parser.add_argument('-r', '--recent',
                        action='store_true',
                        help='pick most recently added words and quiz them.')
    cl_args = parser.parse_args()

    wordlist_ids = cl_args.listids if cl_args.listids else None

    done = False
    counter = 0
    while not done:
        row = get_next_word_to_test(wordlist_ids, 'plurals')

        if not row:
            print("es gibt keine Welten mehr zu erobern")
            break

        counter += 1
        print("[%s]" % counter, end=' ')

        print("%s %s" % (row['article'], row['word']))
        prompt = "type correct plural, q to quit:  --> "
        answer = input(prompt).strip()

        if answer.startswith('q'):
            done = True
            break

        payload = {
            "quiz_id": row['quiz_id'],
            "word_id": row['word_id'],
            "attribute_id": row['attributes']['plural']['attribute_id'],
            "presentation_count": row['attributes']['plural']['presentation_count'],
            "correct_count": row['attributes']['plural']['correct_count']
        }

        if answer == row['attributes']['plural']['attrvalue']:
            print("richtig")
            payload['correct_count'] += 1
        else:
            print("falsch:  %s" % row['attributes']['plural']['attrvalue'])

        payload['presentation_count'] += 1

        url = "%s/api/quiz_data" % config.Config.DB_URL
        r = requests.post(url, data=payload)

    print('bis bald')
