to do local development install:

(venv) MacBookPro:deutsch_lernen dougtomm$ pwd
/Users/dougtomm/src/deutsch_lernen
(venv) MacBookPro:deutsch_lernen dougtomm$ python -m pip install -e .

---

as of sep 2025 this machine runs the following:

* sequoia 15.6
* python 3.13.7
* mysql 8.4.6

the name of the python executable is python3.  the command 'python'
will not be found in the environment.  do not finesse the PATH
or other env variables to make 'python' appear.  the way to do this
properly is with venv.

'python' and other essential utilities will appear in the virtual
environment.

Dougs-MacBook-Pro:deutsch_lernen dougtomm$ python3 -m venv venv/
Dougs-MacBook-Pro:deutsch_lernen dougtomm$ source venv/bin/activate
(venv) Dougs-MacBook-Pro:deutsch_lernen dougtomm$ which python
/Users/dougtomm/src/deutsch_lernen/venv/bin/python

then all you have to do is start the server:

(venv) MacBookPro:dlernen dougtomm$ pwd
/Users/dougtomm/src/deutsch_lernen/dlernen
(venv) MacBookPro:dlernen dougtomm$ ./start.sh
 * Serving Flask app 'dlernen'
 * Debug mode: on
WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http://127.0.0.1:5000
Press CTRL+C to quit
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 772-306-967

-------

to run server health check (including db check):

(venv) MacBookPro:deutsch_lernen dougtomm$ curl 127.0.0.1:5000/healthcheck
OK(venv) MacBookPro:deutsch_lernen dougtomm$

------

to run the tests:

(venv) MacBookPro:deutsch_lernen dougtomm$ pwd
/Users/dougtomm/src/deutsch_lernen
(venv) MacBookPro:deutsch_lernen dougtomm$ python -m unittest
............................................................................................
----------------------------------------------------------------------
Ran 92 tests in 6.027s

OK
(venv) MacBookPro:deutsch_lernen dougtomm$

we're using test discovery so that the command to run the suite is as simple as possible.
NOTE!  all the files with unit tests have to match the pattern test*.py, or else unittest won't find them.  stupid.

example of running an individual test:

(venv) MacBookPro:deutsch_lernen dougtomm$ python -m unittest tests.tests_api.APIWordlists.test_real_wordlist


------
backups

logrotate is configured to rotate the mysql dump file, which is in

~/Dropbox/personal/deutsch_lernen

config file is

/usr/local/etc/logrotate.d/deutsch.conf

backups are run through cron; see crontab -l

------

TODO review return values of requests.get.  see function wordlists() as example.  should be checking that
    the response is valid before inspecting json.
    it's not in the documentation (https://requests.readthedocs.io/en/latest/api/#requests.Response) but
    the response object implements a __bool__ method that lets you do
    if response:
        bla
    else:
        bla
    this fun fact is in the source code, which the documention points to.  better to check response.status_code
    explicitly

tests:

1. new word being added is nonempty when stripped - don't add '' or '   ' as words.
2. wordlist citation is never stored as empty string.  it should either be a nonempy string or null.

-----

misc

review how attribute values are stored.  make sure we aren't storing empty strings; unset attribute values
should be null in the database.

----
TODO - in add/edit word page, get rid of the radio button selectors for part of speech.  the system should
    figure out the POS from the fields that are filled in.  it should be possible to add a word that is every
    part of speech just by filling in all the fields.

TODO - need a way to add a word from scratch, either an app or through UI.  currently no way to add 'der Leiter'
    because 'die Leiter' is already there.  fortunately the data model itself permits this case.

TODO - really need a better way to deal with reflexive verbs

FIXME - smart wordlists aren't recursive - smart lists of other smart lists doesn't work
